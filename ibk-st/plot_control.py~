#!/usr/bin/python3

class PlotSettings(object):
    def __init__(self):
        """
        """
        self.folder_icon = Gtk.IconTheme.get_default().load_icon(
            "gtk-directory", 16, 0)
        self.default_color = "#0000ff"
        self.default_color_alpha = int("0x{0}ff".format(
            self.default_color[1:]), base=16)
        self.layer_default = GdkPixbuf.Pixbuf.new(
            GdkPixbuf.Colorspace.RGB, True, 8, 16, 16)
        self.layer_default.fill(self.default_color_alpha)
        self.draw_grid = True
        self.equal_area_projection = True
        self.minor_grid_spacing = 2
        self.major_grid_spacing = 10
        self.grid_cutoff_lat = 80
        self.show_north = False
        #ax.set_azimuth_ticks([0], labels=['N'])
        self.show_center_cross = False #A cross at the center of the plot
        self.pixel_density = 75
        self.grid_linestyle = "--"
        self.grid_color = "#787878"
        self.grid_width = 0.4
        self.fig = Figure(dpi = self.pixel_density)

    def get_fig(self):
        return self.fig

    def get_inverse_transform(self):
        """
        """
        if self.equal_area_projection == True:
            return mplstereonet.stereonet_transforms.InvertedLambertTransform(
                                0, 0, self.get_pixel_density())
        else:
            return mplstereonet.stereonet_transforms.InvertedStereographicTransform(
                                0, 0, self.get_pixel_density())

    def get_color(self):
        return self.default_color

    def get_draw_grid_state(self):
        return self.draw_grid

    def set_draw_grid_state(self, new_state):
        self.draw_grid = new_state

    def get_folder_icon(self):
        return self.folder_icon

    def get_pixel_density(self):
        return self.pixel_density

    def get_projection(self):
        if self.equal_area_projection == True:
            return "equal_area_stereonet"
        else:
            return "equal_angle_stereonet"

    def get_projection_state(self):
        print("Getting new state: ", self.equal_area_projection)
        return self.equal_area_projection

    def set_projection_state(self, new_state):
        print("Setting new state: ", new_state)
        self.equal_area_projection = new_state

    def get_grid_linestyle(self):
        return self.grid_linestyle

    def get_grid_color(self):
        return self.grid_color

    def get_grid_width(self):
        return self.grid_width

    def get_stereonet(self):
        self.fig.clf()
        gridspec = GridSpec(1, 1)
        sp_stereo = gridspec.new_subplotspec((0, 0))
        ax_stereo = self.fig.add_subplot(sp_stereo, projection = self.get_projection())
        return ax_stereo

    def get_stereo_rose(self):
        self.fig.clf()
        gridspec = GridSpec(1, 2)
        sp_stereo = gridspec.new_subplotspec((0, 0),
                                             rowspan = 1, colspan = 1)
        sp_rose = gridspec.new_subplotspec((0, 1),
                                           rowspan = 1, colspan = 1)
        ax_stereo = self.fig.add_subplot(sp_stereo, projection =
                                         self.get_projection())
        ax_rose = self.fig.add_subplot(sp_rose, polar=True)
        ax_rose.set_theta_direction(-1)
        ax_rose.set_theta_offset(np.pi/2.0)
        return ax_stereo, ax_rose

    def get_rose_diagram(self):
        self.fig.clf()
        gridspec = GridSpec(1, 1)
        sp_rose = gridspec.new_subplotspec((0, 0))
        ax_rose = self.fig.add_subplot(sp_rose, polar=True)
        ax_rose.set_theta_direction(-1)
        ax_rose.set_theta_offset(np.pi/2.0)
        return ax_rose

    def get_pt_view(self):
        self.fig.clf()
        gridspec = GridSpec(2, 5)
        sp_stereo = gridspec.new_subplotspec((0, 0), colspan=3, rowspan=2)
        sp_fluc = gridspec.new_subplotspec((0, 3), colspan=2)
        sp_mohr = gridspec.new_subplotspec((1, 3), colspan=2)
        ax_stereo = self.fig.add_subplot(sp_stereo, projection =
                                         self.get_projection())
        ax_fluc = self.fig.add_subplot(sp_fluc, aspect = "equal")
        ax_mohr = self.fig.add_subplot(sp_mohr, aspect = "equal")
        return ax_stereo, ax_fluc, ax_mohr
